{
  "getting-started.md": "# Getting Started\n\nWelcome to **svelte-markdown-pages** - a powerful, flexible solution for building documentation sites with distributed navigation structure for Svelte projects.\n\n## What is svelte-markdown-pages?\n\nsvelte-markdown-pages is a standalone npm package that transforms your markdown content into a fully-featured documentation site. It provides:\n\n- **Distributed Navigation**: Each folder defines its own structure with `.index.json` files\n- **Multiple Output Formats**: App bundles, website navigation, and static HTML sites\n- **Type-Safe**: Full TypeScript support with Zod validation\n- **Framework Agnostic**: Svelte 5 components that work in any Svelte project\n- **Flexible**: Point to any directory with markdown and `.index.json` files\n- **Comprehensive Testing**: >90% test coverage with comprehensive test suite\n\n## Key Features\n\n### 🗂️ Distributed Navigation\nOrganize your documentation with a distributed navigation system. Each folder can define its own structure using `.index.json` files, making it easy to maintain large documentation sites.\n\n### 📦 Multiple Output Formats\nGenerate different outputs for different use cases:\n- **App bundles** for integration into existing Svelte applications\n- **Website navigation** for standalone documentation sites\n- **Static HTML sites** for deployment to any hosting platform\n\n### 🔧 Type-Safe Development\nBuilt with TypeScript and Zod validation, providing excellent developer experience with full type safety and runtime validation.\n\n### 🎨 Framework Agnostic\nSvelte 5 components that work seamlessly in any Svelte project, including SvelteKit applications.\n\n### ⚡ Flexible & Extensible\nPoint to any directory with markdown content and `.index.json` files. Customize everything from styling to content processing with plugins.\n\n## Quick Start\n\n### 1. Install the Package\n\n```bash\nnpm install svelte-markdown-pages\n```\n\n### 2. Create Your Content Structure\n\nCreate a directory with your markdown content and `.index.json` files:\n\n```\nmy-docs/\n├── .index.json\n├── getting-started.md\n└── guides/\n    ├── .index.json\n    └── installation.md\n```\n\n### 3. Define Navigation\n\n**Root level** (`my-docs/.index.json`):\n```json\n{\n  \"items\": [\n    { \"name\": \"getting-started\", \"type\": \"page\", \"label\": \"Getting Started\" },\n    { \"name\": \"guides\", \"type\": \"section\", \"label\": \"Guides\" }\n  ]\n}\n```\n\n**Section level** (`my-docs/guides/.index.json`):\n```json\n{\n  \"items\": [\n    { \"name\": \"installation\", \"type\": \"page\", \"label\": \"Installation\" }\n  ]\n}\n```\n\n### 4. Build Your Documentation\n\n```typescript\nimport { buildDocs } from 'svelte-markdown-pages/builder';\n\nawait buildDocs('./my-docs', {\n  appOutput: './src/lib/content',\n  websiteOutput: './src/lib/content',\n  includeContent: true\n});\n```\n\n### 5. Use in Your App\n\n```typescript\nimport { NavigationTree, loadContent } from 'svelte-markdown-pages/renderer';\nimport navigationData from './src/lib/content/navigation.json';\nimport contentBundle from './src/lib/content/content.json';\n\nconst navigation = new NavigationTree(navigationData);\nconst content = await loadContent('getting-started.md', contentBundle);\n```\n\n## Use Cases\n\n### Documentation Sites\nPerfect for project documentation, API references, and user guides.\n\n### Blog Systems\nCreate blog systems with hierarchical organization and easy content management.\n\n### Knowledge Bases\nBuild comprehensive knowledge bases with distributed content management.\n\n### Static Sites\nGenerate complete static HTML sites for deployment to any hosting platform.\n\n## What's Next?\n\nReady to get started? Check out the [Installation](./guides/installation.md) guide to set up your first documentation site!\n\n## Examples\n\n- **This Website**: Built using svelte-markdown-pages itself\n- **Example Project**: See the `packages/examples` directory for a complete working example\n- **Test Suite**: Comprehensive examples in the `packages/tests` directory\n",
  "guides/installation.md": "# Installation\n\nFollow this guide to install and set up svelte-markdown-pages in your project.\n\n## Prerequisites\n\nBefore installing svelte-markdown-pages, make sure you have:\n\n- **Node.js 18+** - Required for modern JavaScript features\n- **npm or yarn** - Package manager for installing dependencies\n- **Svelte 5+** - The package is designed for Svelte 5 and later\n\n## Quick Install\n\nInstall the package using npm:\n\n```bash\nnpm install svelte-markdown-pages\n```\n\nOr using yarn:\n\n```bash\nyarn add svelte-markdown-pages\n```\n\n## Manual Setup\n\n### 1. Create a New SvelteKit Project (Optional)\n\nIf you're starting from scratch, create a new SvelteKit project:\n\n```bash\nnpm create svelte@latest my-docs-site\ncd my-docs-site\nnpm install\n```\n\n### 2. Install svelte-markdown-pages\n\n```bash\nnpm install svelte-markdown-pages\n```\n\n### 3. Set Up Your Content Structure\n\nCreate a directory for your documentation content:\n\n```bash\nmkdir docs\n```\n\n### 4. Create Your First Content\n\nCreate a basic documentation structure:\n\n```bash\n# Create the main index file\necho '{\n  \"items\": [\n    { \"name\": \"getting-started\", \"type\": \"page\", \"label\": \"Getting Started\" }\n  ]\n}' > docs/.index.json\n\n# Create your first markdown file\necho '# Getting Started\n\nWelcome to your documentation site!\n\nThis is your first page created with svelte-markdown-pages.' > docs/getting-started.md\n```\n\n### 5. Build Your Documentation\n\nCreate a build script in your `package.json`:\n\n```json\n{\n  \"scripts\": {\n    \"build:docs\": \"node -e \\\"import('svelte-markdown-pages/builder').then(({buildDocs}) => buildDocs('./docs', {appOutput: './src/lib/content', includeContent: true}))\\\"\"\n  }\n}\n```\n\nOr create a build script file:\n\n```typescript\n// scripts/build-docs.js\nimport { buildDocs } from 'svelte-markdown-pages/builder';\n\nawait buildDocs('./docs', {\n  appOutput: './src/lib/content',\n  websiteOutput: './src/lib/content',\n  includeContent: true\n});\n```\n\n### 6. Use in Your SvelteKit App\n\nCreate a documentation page in your SvelteKit app:\n\n```svelte\n<!-- src/routes/docs/+page.svelte -->\n<script lang=\"ts\">\n  import { NavigationTree, loadContent } from 'svelte-markdown-pages/renderer';\n  import navigationData from '$lib/content/navigation.json';\n  import contentBundle from '$lib/content/content.json';\n  \n  let navigation = $state(new NavigationTree(navigationData));\n  let currentPage = $state(\"getting-started.md\");\n  let pageContent = $state<string | null>(null);\n  \n  $effect(() => {\n    if (currentPage && contentBundle) {\n      loadContent(currentPage, contentBundle).then(content => {\n        pageContent = content;\n      });\n    }\n  });\n</script>\n\n<div class=\"docs-layout\">\n  <nav class=\"sidebar\">\n    <!-- Navigation will go here -->\n  </nav>\n  <main class=\"content\">\n    {@html pageContent || 'Loading...'}\n  </main>\n</div>\n```\n\n## Content Structure\n\n### Basic Structure\n\nYour documentation should follow this structure:\n\n```\ndocs/\n├── .index.json              # Root navigation\n├── getting-started.md        # Getting started page\n├── guides/\n│   ├── .index.json          # Guides section navigation\n│   ├── installation.md      # Installation guide\n│   └── configuration.md     # Configuration guide\n└── api/\n    ├── .index.json          # API section navigation\n    └── reference.md         # API reference\n```\n\n### Index.json Format\n\nEach `.index.json` file defines the navigation structure for that directory:\n\n```json\n{\n  \"items\": [\n    {\n      \"name\": \"page-name\",\n      \"type\": \"page\",\n      \"label\": \"Page Display Name\"\n    },\n    {\n      \"name\": \"section-name\",\n      \"type\": \"section\",\n      \"label\": \"Section Display Name\"\n    }\n  ]\n}\n```\n\n### Item Properties\n\n- `name`: File/directory name (without extension)\n- `type`: Either `\"page\"` or `\"section\"`\n- `label`: Display label for navigation\n- `collapsed`: Optional boolean to collapse sections by default\n- `url`: Optional external URL\n\n## Build Configuration\n\n### Basic Build\n\n```typescript\nimport { buildDocs } from 'svelte-markdown-pages/builder';\n\nawait buildDocs('./docs', {\n  appOutput: './src/lib/content',\n  includeContent: true\n});\n```\n\n### Advanced Build Options\n\n```typescript\nawait buildDocs('./docs', {\n  appOutput: './src/lib/content',\n  websiteOutput: './src/lib/content',\n  staticOutput: './dist',\n  includeContent: true,\n  processor: customProcessor,\n  plugins: [myPlugin]\n});\n```\n\n## CLI Usage\n\nYou can also use the CLI for quick builds:\n\n```bash\n# Build for app integration\nnpx svelte-markdown-pages build ./docs --output ./src/lib/content\n\n# Generate static site\nnpx svelte-markdown-pages static ./docs --output ./dist\n```\n\n## Next Steps\n\nNow that you have svelte-markdown-pages installed, check out:\n\n- [Configuration](./configuration.md) - Learn about build options and customization\n- [API Reference](../api/builder.md) - Complete API documentation\n- [Examples](../../packages/examples) - Working examples in the examples package\n\n## Troubleshooting\n\n### Common Issues\n\n**Module not found errors**: Make sure you're using Node.js 18+ and have installed the package correctly.\n\n**Build errors**: Check that your `.index.json` files are valid JSON and follow the correct format.\n\n**Content not loading**: Verify that your markdown files exist and are referenced correctly in the navigation.\n\n### Getting Help\n\n- Check the [API Reference](../api/builder.md) for detailed documentation\n- Look at the [examples](../../packages/examples) for working implementations\n- Review the [test suite](../../packages/tests) for usage patterns\n",
  "guides/configuration.md": "# Configuration\n\nLearn how to configure svelte-markdown-pages for your project with detailed options and examples.\n\n## Basic Configuration\n\nThe simplest way to build your documentation:\n\n```typescript\nimport { buildDocs } from 'svelte-markdown-pages/builder';\n\nawait buildDocs('./docs', {\n  appOutput: './src/lib/content',\n  includeContent: true\n});\n```\n\n## Build Options\n\n### `appOutput`\nDirectory where app-specific files will be generated.\n\n```typescript\nawait buildDocs('./docs', {\n  appOutput: './src/lib/content'\n});\n```\n\n**Generated files:**\n- `navigation.json` - Navigation structure\n- `content.json` - Content bundle (if `includeContent: true`)\n\n### `websiteOutput`\nDirectory where website-specific files will be generated.\n\n```typescript\nawait buildDocs('./docs', {\n  websiteOutput: './src/lib/content'\n});\n```\n\n**Generated files:**\n- `navigation.json` - Navigation structure\n- `content.json` - Content bundle (if `includeContent: true`)\n\n### `includeContent`\nWhether to include content in the output bundle.\n\n```typescript\nawait buildDocs('./docs', {\n  appOutput: './src/lib/content',\n  includeContent: true  // Default: false\n});\n```\n\n### `staticOutput`\nDirectory for static site generation.\n\n```typescript\nawait buildDocs('./docs', {\n  staticOutput: './dist'\n});\n```\n\n## Advanced Options\n\n### Custom Processors\n\nYou can provide custom content processors for advanced transformations:\n\n```typescript\nconst processor = {\n  process(content: string): string {\n    // Add table of contents\n    return addTableOfContents(content);\n  }\n};\n\nconst result = await buildDocs('./docs', {\n  appOutput: './src/lib/content',\n  processor\n});\n```\n\n### Plugins\n\nUse plugins to extend functionality:\n\n```typescript\nimport { syntaxHighlightingPlugin, tocPlugin } from 'svelte-markdown-pages/plugins';\n\nconst result = await buildDocs('./docs', {\n  appOutput: './src/lib/content',\n  plugins: [syntaxHighlightingPlugin, tocPlugin]\n});\n```\n\n## Static Site Generation\n\nGenerate a complete static HTML site:\n\n```typescript\nimport { generateStaticSite } from 'svelte-markdown-pages/builder';\n\nconst result = await generateStaticSite('./docs', './dist', {\n  title: 'My Documentation',\n  baseUrl: 'https://example.com',\n  includeIndex: true\n});\n```\n\n### Static Site Options\n\n#### `title`\nSite title for the generated HTML.\n\n```typescript\nawait generateStaticSite('./docs', './dist', {\n  title: 'My Awesome Documentation'\n});\n```\n\n#### `baseUrl`\nBase URL for the site (used for absolute links).\n\n```typescript\nawait generateStaticSite('./docs', './dist', {\n  baseUrl: 'https://docs.example.com'\n});\n```\n\n#### `css`\nCustom CSS content to include in the generated HTML.\n\n```typescript\nawait generateStaticSite('./docs', './dist', {\n  css: `\n    body { font-family: 'Inter', sans-serif; }\n    .docs-content { max-width: 800px; margin: 0 auto; }\n  `\n});\n```\n\n#### `js`\nCustom JavaScript content to include in the generated HTML.\n\n```typescript\nawait generateStaticSite('./docs', './dist', {\n  js: `\n    // Add syntax highlighting\n    hljs.highlightAll();\n  `\n});\n```\n\n#### `includeIndex`\nWhether to generate an index page.\n\n```typescript\nawait generateStaticSite('./docs', './dist', {\n  includeIndex: true  // Default: false\n});\n```\n\n#### `indexTitle`\nTitle for the generated index page.\n\n```typescript\nawait generateStaticSite('./docs', './dist', {\n  includeIndex: true,\n  indexTitle: 'Documentation Home'\n});\n```\n\n## CLI Usage\n\n### Build Command\n\nBuild documentation for app integration:\n\n```bash\nnpx svelte-markdown-pages build <content-path> [options]\n```\n\n**Options:**\n- `--output, -o`: Output directory\n- `--include-content`: Include content in output\n- `--processor`: Custom processor file\n- `--plugins`: Plugin configuration file\n\n**Examples:**\n```bash\n# Basic build\nnpx svelte-markdown-pages build ./docs --output ./src/lib/content\n\n# With content included\nnpx svelte-markdown-pages build ./docs --output ./src/lib/content --include-content\n\n# With custom processor\nnpx svelte-markdown-pages build ./docs --output ./src/lib/content --processor ./my-processor.js\n```\n\n### Static Command\n\nGenerate a complete static HTML site:\n\n```bash\nnpx svelte-markdown-pages static <content-path> <output-path> [options]\n```\n\n**Options:**\n- `--title`: Site title\n- `--base-url`: Base URL for the site\n- `--css`: Custom CSS file\n- `--js`: Custom JavaScript file\n- `--include-index`: Generate index page\n\n**Examples:**\n```bash\n# Basic static site\nnpx svelte-markdown-pages static ./docs ./dist\n\n# With custom title and base URL\nnpx svelte-markdown-pages static ./docs ./dist --title \"My Docs\" --base-url \"https://docs.example.com\"\n\n# With custom styling\nnpx svelte-markdown-pages static ./docs ./dist --css ./custom.css --js ./custom.js\n```\n\n## Environment Variables\n\nConfigure behavior using environment variables:\n\n### `SMP_DEBUG`\nEnable debug logging.\n\n```bash\nSMP_DEBUG=1 npx svelte-markdown-pages build ./docs\n```\n\n### `SMP_VERBOSE`\nEnable verbose output.\n\n```bash\nSMP_VERBOSE=1 npx svelte-markdown-pages build ./docs\n```\n\n## Configuration Files\n\n### Package.json Scripts\n\nAdd build scripts to your `package.json`:\n\n```json\n{\n  \"scripts\": {\n    \"build:docs\": \"svelte-markdown-pages build ./docs --output ./src/lib/content --include-content\",\n    \"build:static\": \"svelte-markdown-pages static ./docs ./dist --title \\\"My Documentation\\\" --include-index\",\n    \"dev:docs\": \"npm run build:docs && npm run dev\"\n  }\n}\n```\n\n### Build Scripts\n\nCreate dedicated build scripts for complex configurations:\n\n```typescript\n// scripts/build-docs.js\nimport { buildDocs } from 'svelte-markdown-pages/builder';\nimport { syntaxHighlightingPlugin } from 'svelte-markdown-pages/plugins';\n\nconst processor = {\n  process(content: string): string {\n    // Custom processing logic\n    return content.replace(/:::(.+?):::/g, '<CustomComponent>$1</CustomComponent>');\n  }\n};\n\nawait buildDocs('./docs', {\n  appOutput: './src/lib/content',\n  websiteOutput: './src/lib/content',\n  includeContent: true,\n  processor,\n  plugins: [syntaxHighlightingPlugin]\n});\n```\n\n## Error Handling\n\nThe builder functions throw errors for common issues:\n\n```typescript\ntry {\n  const result = await buildDocs('./docs');\n} catch (error) {\n  if (error.code === 'ENOENT') {\n    console.error('Content directory not found');\n  } else if (error.code === 'INVALID_INDEX') {\n    console.error('Invalid .index.json file');\n  } else {\n    console.error('Build failed:', error.message);\n  }\n}\n```\n\n## Performance Optimization\n\n### Large Documentation Sites\n\nFor large documentation sites, consider:\n\n```typescript\n// Build only what you need\nawait buildDocs('./docs', {\n  appOutput: './src/lib/content',\n  includeContent: false,  // Don't include content if not needed\n  processor: {\n    process(content: string): string {\n      // Optimize content processing\n      return content;\n    }\n  }\n});\n```\n\n### Caching\n\nImplement caching for faster rebuilds:\n\n```typescript\nimport { buildDocs } from 'svelte-markdown-pages/builder';\nimport { existsSync, readFileSync } from 'fs';\n\nconst cacheFile = './.docs-cache.json';\n\n// Check if cache exists and is valid\nif (existsSync(cacheFile)) {\n  const cache = JSON.parse(readFileSync(cacheFile, 'utf8'));\n  // Use cache if valid\n}\n\nconst result = await buildDocs('./docs', {\n  appOutput: './src/lib/content',\n  includeContent: true\n});\n\n// Save cache\n// ...\n```\n\n## Next Steps\n\nNow that you understand configuration, explore:\n\n- [Advanced Customization](./advanced/customization.md) - Learn about custom components and styling\n- [Plugins](./advanced/plugins.md) - Extend functionality with plugins\n- [API Reference](../api/builder.md) - Complete API documentation\n",
  "guides/advanced/customization.md": "# Advanced Customization\n\nLearn how to customize svelte-markdown-pages for your specific needs with advanced configuration options.\n\n## Custom Components\n\nYou can create custom components to extend the functionality of your documentation:\n\n```svelte\n<!-- src/lib/components/CustomComponent.svelte -->\n<script lang=\"ts\">\n\tlet { content } = $props<{ content: string }>();\n</script>\n\n<div class=\"custom-component\">\n\t{@html content}\n</div>\n\n<style>\n\t.custom-component {\n\t\tbackground: #f8f9fa;\n\t\tborder: 1px solid #e9ecef;\n\t\tborder-radius: 8px;\n\t\tpadding: 1rem;\n\t\tmargin: 1rem 0;\n\t}\n</style>\n```\n\n## Custom Processors\n\nCreate custom content processors for advanced transformations:\n\n```typescript\nconst customProcessor = {\n\tprocess(content: string): string {\n\t\t// Replace custom syntax with HTML\n\t\treturn content\n\t\t\t.replace(/:::(.+?):::/g, '<CustomComponent content=\"$1\" />')\n\t\t\t.replace(/\\[\\[(.+?)\\]\\]/g, '<InternalLink href=\"$1\" />');\n\t}\n};\n\nawait buildDocs('./docs', {\n\tappOutput: './src/lib/content',\n\tprocessor: customProcessor\n});\n```\n\n## Custom Styling\n\n### CSS Customization\n\nOverride default styles with your own CSS:\n\n```css\n/* Custom documentation styles */\n.docs-content {\n\tfont-family: 'Inter', sans-serif;\n\tline-height: 1.7;\n}\n\n.docs-content h1 {\n\tcolor: #1a202c;\n\tborder-bottom: 3px solid #3182ce;\n}\n\n.docs-content code {\n\tbackground: #edf2f7;\n\tcolor: #2d3748;\n\tfont-weight: 500;\n}\n\n.docs-content pre {\n\tbackground: #2d3748;\n\tborder-radius: 12px;\n\tbox-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n```\n\n### Theme System\n\nCreate theme variations:\n\n```typescript\nconst themes = {\n\tlight: {\n\t\tbackground: '#ffffff',\n\t\ttext: '#2d3748',\n\t\tprimary: '#3182ce',\n\t\tsecondary: '#718096'\n\t},\n\tdark: {\n\t\tbackground: '#1a202c',\n\t\ttext: '#e2e8f0',\n\t\tprimary: '#63b3ed',\n\t\tsecondary: '#a0aec0'\n\t}\n};\n```\n\n## Custom Navigation\n\n### Custom Navigation Components\n\nCreate custom navigation components:\n\n```svelte\n<!-- src/lib/components/CustomSidebar.svelte -->\n<script lang=\"ts\">\n\timport type { NavigationItem } from 'svelte-markdown-pages';\n\t\n\tlet { items, currentPage } = $props<{\n\t\titems: NavigationItem[];\n\t\tcurrentPage: string;\n\t}>();\n\t\n\tfunction renderItem(item: NavigationItem): string {\n\t\tif (item.type === 'section') {\n\t\t\treturn `\n\t\t\t\t<div class=\"nav-section\">\n\t\t\t\t\t<h3 class=\"nav-section-title\">${item.label}</h3>\n\t\t\t\t\t${item.items?.map(renderItem).join('') || ''}\n\t\t\t\t</div>\n\t\t\t`;\n\t\t}\n\t\t\n\t\tconst isActive = currentPage === item.name + '.md';\n\t\treturn `\n\t\t\t<a href=\"/docs/${item.name}\" class=\"nav-item ${isActive ? 'active' : ''}\">\n\t\t\t\t${item.label}\n\t\t\t</a>\n\t\t`;\n\t}\n</script>\n\n<nav class=\"custom-sidebar\">\n\t{@html items.map(renderItem).join('')}\n</nav>\n\n<style>\n\t.custom-sidebar {\n\t\tbackground: #f7fafc;\n\t\tpadding: 1.5rem;\n\t\tborder-right: 1px solid #e2e8f0;\n\t}\n\t\n\t.nav-section-title {\n\t\tfont-size: 0.875rem;\n\t\tfont-weight: 600;\n\t\ttext-transform: uppercase;\n\t\tletter-spacing: 0.05em;\n\t\tcolor: #718096;\n\t\tmargin: 1.5rem 0 0.75rem 0;\n\t}\n\t\n\t.nav-item {\n\t\tdisplay: block;\n\t\tpadding: 0.5rem 0.75rem;\n\t\tcolor: #4a5568;\n\t\ttext-decoration: none;\n\t\tborder-radius: 6px;\n\t\tmargin: 0.25rem 0;\n\t\ttransition: all 0.2s;\n\t}\n\t\n\t.nav-item:hover {\n\t\tbackground: #edf2f7;\n\t\tcolor: #2d3748;\n\t}\n\t\n\t.nav-item.active {\n\t\tbackground: #3182ce;\n\t\tcolor: white;\n\t}\n</style>\n```\n\n## Custom Layouts\n\n### Page Layouts\n\nCreate different layouts for different types of content:\n\n```svelte\n<!-- src/lib/layouts/DocumentationLayout.svelte -->\n<script lang=\"ts\">\n\tlet { children, title, sidebar } = $props<{\n\t\tchildren: any;\n\t\ttitle: string;\n\t\tsidebar: any;\n\t}>();\n</script>\n\n<div class=\"doc-layout\">\n\t<header class=\"doc-header\">\n\t\t<h1>{title}</h1>\n\t</header>\n\t\n\t<div class=\"doc-body\">\n\t\t<aside class=\"doc-sidebar\">\n\t\t\t{@render sidebar()}\n\t\t</aside>\n\t\t\n\t\t<main class=\"doc-content\">\n\t\t\t{@render children()}\n\t\t</main>\n\t</div>\n</div>\n\n<style>\n\t.doc-layout {\n\t\tmin-height: 100vh;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\t\n\t.doc-header {\n\t\tbackground: #2d3748;\n\t\tcolor: white;\n\t\tpadding: 1rem 2rem;\n\t}\n\t\n\t.doc-body {\n\t\tdisplay: flex;\n\t\tflex: 1;\n\t}\n\t\n\t.doc-sidebar {\n\t\twidth: 280px;\n\t\tbackground: #f7fafc;\n\t\tborder-right: 1px solid #e2e8f0;\n\t}\n\t\n\t.doc-content {\n\t\tflex: 1;\n\t\tpadding: 2rem;\n\t}\n</style>\n```\n\n## Custom Markdown Extensions\n\n### Syntax Extensions\n\nExtend markdown syntax with custom processors:\n\n```typescript\nconst markdownExtensions = {\n\t// Custom admonition blocks\n\tadmonition: {\n\t\tpattern: /^:::(\\w+)\\n([\\s\\S]*?)\\n:::$/gm,\n\t\treplacement: (match: string, type: string, content: string) => {\n\t\t\tconst icons = {\n\t\t\t\tinfo: 'ℹ️',\n\t\t\t\twarning: '⚠️',\n\t\t\t\terror: '❌',\n\t\t\t\tsuccess: '✅'\n\t\t\t};\n\t\t\t\n\t\t\treturn `\n\t\t\t\t<div class=\"admonition admonition-${type}\">\n\t\t\t\t\t<div class=\"admonition-header\">\n\t\t\t\t\t\t${icons[type as keyof typeof icons] || '📝'} ${type.charAt(0).toUpperCase() + type.slice(1)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"admonition-content\">\n\t\t\t\t\t\t${content}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t`;\n\t\t}\n\t},\n\t\n\t// Custom callout blocks\n\tcallout: {\n\t\tpattern: /^\\[\\[(.+?)\\]\\]\\n([\\s\\S]*?)\\n\\[\\[\\/\\]\\]$/gm,\n\t\treplacement: (match: string, title: string, content: string) => {\n\t\t\treturn `\n\t\t\t\t<div class=\"callout\">\n\t\t\t\t\t<div class=\"callout-title\">${title}</div>\n\t\t\t\t\t<div class=\"callout-content\">\n\t\t\t\t\t\t${content}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t`;\n\t\t}\n\t}\n};\n\nconst processor = {\n\tprocess(content: string): string {\n\t\tlet processed = content;\n\t\t\n\t\t// Apply custom extensions\n\t\tObject.values(markdownExtensions).forEach(extension => {\n\t\t\tprocessed = processed.replace(extension.pattern, extension.replacement);\n\t\t});\n\t\t\n\t\treturn processed;\n\t}\n};\n```\n\n## Custom Build Process\n\n### Build Hooks\n\nAdd custom build hooks for advanced processing:\n\n```typescript\nconst buildHooks = {\n\tbeforeBuild: async (contentPath: string) => {\n\t\tconsole.log('Starting build for:', contentPath);\n\t\t// Pre-processing tasks\n\t},\n\t\n\tafterBuild: async (result: any) => {\n\t\tconsole.log('Build completed:', result);\n\t\t// Post-processing tasks\n\t},\n\t\n\tonError: (error: Error) => {\n\t\tconsole.error('Build error:', error);\n\t\t// Error handling\n\t}\n};\n\nawait buildDocs('./docs', {\n\tappOutput: './src/lib/content',\n\thooks: buildHooks\n});\n```\n\n## Performance Optimization\n\n### Lazy Loading\n\nImplement lazy loading for large documentation sites:\n\n```typescript\nconst lazyProcessor = {\n\tprocess(content: string): string {\n\t\t// Add lazy loading attributes to images\n\t\treturn content.replace(\n\t\t\t/<img([^>]+)>/g,\n\t\t\t'<img$1 loading=\"lazy\">'\n\t\t);\n\t}\n};\n```\n\n### Code Splitting\n\nSplit large content into smaller chunks:\n\n```typescript\nconst chunkProcessor = {\n\tprocess(content: string): string {\n\t\t// Split content into sections\n\t\tconst sections = content.split(/(?=^#{1,3}\\s)/m);\n\t\t\n\t\treturn sections.map((section, index) => {\n\t\t\tif (index === 0) return section;\n\t\t\treturn `<section data-chunk=\"${index}\">${section}</section>`;\n\t\t}).join('');\n\t}\n};\n```\n\n## Next Steps\n\nNow that you understand advanced customization, explore:\n\n- [Plugins](./plugins.md) - Extend functionality with plugins\n- [API Reference](../api/builder.md) - Complete API documentation\n- [Examples](../../packages/examples) - Working examples\n",
  "guides/advanced/plugins.md": "# Plugins\n\nExtend svelte-markdown-pages functionality with plugins for custom processing, styling, and features.\n\n## Plugin System\n\nThe plugin system allows you to extend the functionality of svelte-markdown-pages with custom processors, transformers, and utilities.\n\n## Creating Plugins\n\n### Basic Plugin Structure\n\nA plugin is an object with specific methods and properties:\n\n```typescript\ninterface Plugin {\n\tname: string;\n\tversion: string;\n\tprocess?: (content: string) => string;\n\ttransform?: (content: string) => string;\n\tvalidate?: (content: string) => boolean;\n\tbeforeBuild?: () => void;\n\tafterBuild?: (result: any) => void;\n}\n```\n\n### Simple Plugin Example\n\n```typescript\nconst simplePlugin = {\n\tname: 'simple-plugin',\n\tversion: '1.0.0',\n\t\n\tprocess(content: string): string {\n\t\t// Add custom processing\n\t\treturn content.replace(/hello/g, 'Hello, World!');\n\t}\n};\n\nawait buildDocs('./docs', {\n\tappOutput: './src/lib/content',\n\tplugins: [simplePlugin]\n});\n```\n\n## Built-in Plugins\n\n### Syntax Highlighting Plugin\n\nAdd syntax highlighting to code blocks:\n\n```typescript\nimport { syntaxHighlightingPlugin } from 'svelte-markdown-pages/plugins';\n\nawait buildDocs('./docs', {\n\tappOutput: './src/lib/content',\n\tplugins: [syntaxHighlightingPlugin]\n});\n```\n\n### Table of Contents Plugin\n\nAutomatically generate table of contents:\n\n```typescript\nimport { tocPlugin } from 'svelte-markdown-pages/plugins';\n\nawait buildDocs('./docs', {\n\tappOutput: './src/lib/content',\n\tplugins: [tocPlugin]\n});\n```\n\n### Link Validation Plugin\n\nValidate internal and external links:\n\n```typescript\nimport { linkValidationPlugin } from 'svelte-markdown-pages/plugins';\n\nawait buildDocs('./docs', {\n\tappOutput: './src/lib/content',\n\tplugins: [linkValidationPlugin]\n});\n```\n\n## Custom Plugin Examples\n\n### Admonition Plugin\n\nCreate custom admonition blocks:\n\n```typescript\nconst admonitionPlugin = {\n\tname: 'admonition-plugin',\n\tversion: '1.0.0',\n\t\n\tprocess(content: string): string {\n\t\tconst admonitionTypes = ['info', 'warning', 'error', 'success'];\n\t\t\n\t\treturn content.replace(\n\t\t\t/^:::(\\w+)\\n([\\s\\S]*?)\\n:::$/gm,\n\t\t\t(match, type, content) => {\n\t\t\t\tif (!admonitionTypes.includes(type)) {\n\t\t\t\t\treturn match; // Return original if type not recognized\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst icons = {\n\t\t\t\t\tinfo: 'ℹ️',\n\t\t\t\t\twarning: '⚠️',\n\t\t\t\t\terror: '❌',\n\t\t\t\t\tsuccess: '✅'\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\treturn `\n\t\t\t\t\t<div class=\"admonition admonition-${type}\">\n\t\t\t\t\t\t<div class=\"admonition-header\">\n\t\t\t\t\t\t\t${icons[type]} ${type.charAt(0).toUpperCase() + type.slice(1)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"admonition-content\">\n\t\t\t\t\t\t\t${content}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\t\t\t}\n\t\t);\n\t}\n};\n```\n\n### Code Copy Plugin\n\nAdd copy buttons to code blocks:\n\n```typescript\nconst codeCopyPlugin = {\n\tname: 'code-copy-plugin',\n\tversion: '1.0.0',\n\t\n\tprocess(content: string): string {\n\t\treturn content.replace(\n\t\t\t/<pre><code([^>]*)>([\\s\\S]*?)<\\/code><\\/pre>/g,\n\t\t\t(match, attrs, code) => {\n\t\t\t\treturn `\n\t\t\t\t\t<div class=\"code-block-wrapper\">\n\t\t\t\t\t\t<button class=\"copy-button\" onclick=\"copyCode(this)\">\n\t\t\t\t\t\t\tCopy\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<pre><code${attrs}>${code}</code></pre>\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\t\t\t}\n\t\t);\n\t}\n};\n```\n\n### Image Optimization Plugin\n\nOptimize images and add lazy loading:\n\n```typescript\nconst imageOptimizationPlugin = {\n\tname: 'image-optimization-plugin',\n\tversion: '1.0.0',\n\t\n\tprocess(content: string): string {\n\t\treturn content.replace(\n\t\t\t/<img([^>]+)>/g,\n\t\t\t'<img$1 loading=\"lazy\" decoding=\"async\">'\n\t\t);\n\t}\n};\n```\n\n## Advanced Plugin Features\n\n### Plugin Configuration\n\nPlugins can accept configuration options:\n\n```typescript\nconst configurablePlugin = {\n\tname: 'configurable-plugin',\n\tversion: '1.0.0',\n\t\n\tconfig: {\n\t\tenabled: true,\n\t\toptions: {}\n\t},\n\t\n\tinit(config: any) {\n\t\tthis.config = { ...this.config, ...config };\n\t},\n\t\n\tprocess(content: string): string {\n\t\tif (!this.config.enabled) {\n\t\t\treturn content;\n\t\t}\n\t\t\n\t\t// Apply processing based on config\n\t\treturn content;\n\t}\n};\n\nawait buildDocs('./docs', {\n\tappOutput: './src/lib/content',\n\tplugins: [\n\t\t[configurablePlugin, { enabled: true, options: { theme: 'dark' } }]\n\t]\n});\n```\n\n### Plugin Dependencies\n\nPlugins can depend on other plugins:\n\n```typescript\nconst dependentPlugin = {\n\tname: 'dependent-plugin',\n\tversion: '1.0.0',\n\tdependencies: ['syntax-highlighting'],\n\t\n\tprocess(content: string): string {\n\t\t// This plugin runs after syntax highlighting\n\t\treturn content;\n\t}\n};\n```\n\n### Plugin Hooks\n\nUse hooks for different stages of the build process:\n\n```typescript\nconst hookPlugin = {\n\tname: 'hook-plugin',\n\tversion: '1.0.0',\n\t\n\tbeforeBuild() {\n\t\tconsole.log('Starting build...');\n\t\t// Pre-build setup\n\t},\n\t\n\tprocess(content: string): string {\n\t\t// Content processing\n\t\treturn content;\n\t},\n\t\n\tafterBuild(result: any) {\n\t\tconsole.log('Build completed:', result);\n\t\t// Post-build cleanup\n\t}\n};\n```\n\n## Plugin Validation\n\n### Content Validation\n\nValidate content structure and format:\n\n```typescript\nconst validationPlugin = {\n\tname: 'validation-plugin',\n\tversion: '1.0.0',\n\t\n\tvalidate(content: string): boolean {\n\t\t// Check for required sections\n\t\tconst hasTitle = /^#\\s+.+$/m.test(content);\n\t\tconst hasContent = content.length > 100;\n\t\t\n\t\tif (!hasTitle) {\n\t\t\tconsole.warn('Content missing title');\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (!hasContent) {\n\t\t\tconsole.warn('Content too short');\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\t\n\tprocess(content: string): string {\n\t\tif (!this.validate(content)) {\n\t\t\tthrow new Error('Content validation failed');\n\t\t}\n\t\t\n\t\treturn content;\n\t}\n};\n```\n\n## Plugin Utilities\n\n### Helper Functions\n\nCreate utility functions for plugins:\n\n```typescript\nconst pluginUtils = {\n\textractHeadings(content: string): string[] {\n\t\tconst headingRegex = /^#{1,6}\\s+(.+)$/gm;\n\t\tconst headings: string[] = [];\n\t\tlet match;\n\t\t\n\t\twhile ((match = headingRegex.exec(content)) !== null) {\n\t\t\theadings.push(match[1]);\n\t\t}\n\t\t\n\t\treturn headings;\n\t},\n\t\n\tgenerateId(text: string): string {\n\t\treturn text\n\t\t\t.toLowerCase()\n\t\t\t.replace(/[^a-z0-9]+/g, '-')\n\t\t\t.replace(/^-+|-+$/g, '');\n\t}\n};\n\nconst tocPlugin = {\n\tname: 'toc-plugin',\n\tversion: '1.0.0',\n\t\n\tprocess(content: string): string {\n\t\tconst headings = pluginUtils.extractHeadings(content);\n\t\t\n\t\tif (headings.length === 0) {\n\t\t\treturn content;\n\t\t}\n\t\t\n\t\tconst toc = headings.map(heading => {\n\t\t\tconst id = pluginUtils.generateId(heading);\n\t\t\treturn `- [${heading}](#${id})`;\n\t\t}).join('\\n');\n\t\t\n\t\treturn `## Table of Contents\\n\\n${toc}\\n\\n${content}`;\n\t}\n};\n```\n\n## Plugin Testing\n\n### Unit Testing Plugins\n\nTest your plugins with unit tests:\n\n```typescript\nimport { describe, it, expect } from 'vitest';\n\ndescribe('Admonition Plugin', () => {\n\tit('should process admonition blocks', () => {\n\t\tconst input = `:::info\nThis is an info block\n:::`;\n\t\t\n\t\tconst expected = `<div class=\"admonition admonition-info\">`;\n\t\t\n\t\tconst result = admonitionPlugin.process(input);\n\t\texpect(result).toContain(expected);\n\t});\n\t\n\tit('should handle unknown admonition types', () => {\n\t\tconst input = `:::unknown\nThis is unknown\n:::`;\n\t\t\n\t\tconst result = admonitionPlugin.process(input);\n\t\texpect(result).toBe(input); // Should return original\n\t});\n});\n```\n\n## Plugin Distribution\n\n### Publishing Plugins\n\nCreate and publish plugins as npm packages:\n\n```json\n{\n\t\"name\": \"svelte-markdown-pages-admonition\",\n\t\"version\": \"1.0.0\",\n\t\"description\": \"Admonition plugin for svelte-markdown-pages\",\n\t\"main\": \"dist/index.js\",\n\t\"types\": \"dist/index.d.ts\",\n\t\"keywords\": [\"svelte-markdown-pages\", \"plugin\", \"admonition\"],\n\t\"peerDependencies\": {\n\t\t\"svelte-markdown-pages\": \"^1.0.0\"\n\t}\n}\n```\n\n### Plugin Registry\n\nCreate a plugin registry for easy discovery:\n\n```typescript\n// plugins/index.ts\nexport { admonitionPlugin } from './admonition';\nexport { codeCopyPlugin } from './code-copy';\nexport { imageOptimizationPlugin } from './image-optimization';\n\n// Usage\nimport { admonitionPlugin, codeCopyPlugin } from 'svelte-markdown-pages-plugins';\n\nawait buildDocs('./docs', {\n\tappOutput: './src/lib/content',\n\tplugins: [admonitionPlugin, codeCopyPlugin]\n});\n```\n\n## Best Practices\n\n### Plugin Development\n\n1. **Keep plugins focused**: Each plugin should have a single responsibility\n2. **Provide configuration**: Allow users to customize plugin behavior\n3. **Handle errors gracefully**: Don't break the build if plugin fails\n4. **Document your plugin**: Provide clear documentation and examples\n5. **Test thoroughly**: Ensure your plugin works in different scenarios\n\n### Performance Considerations\n\n1. **Optimize processing**: Use efficient algorithms for content processing\n2. **Cache results**: Cache expensive operations when possible\n3. **Lazy loading**: Load heavy dependencies only when needed\n4. **Memory management**: Clean up resources after processing\n\n## Next Steps\n\nNow that you understand plugins, explore:\n\n- [API Reference](../api/builder.md) - Complete API documentation\n- [Examples](../../packages/examples) - Working examples with plugins\n- [Plugin Gallery](../../plugins) - Collection of community plugins\n",
  "api/builder.md": "# Builder API\n\nThe builder module provides functions for building documentation from markdown content and generating various output formats.\n\n## Functions\n\n### `buildDocs(contentPath, options?)`\n\nBuilds documentation from a content directory.\n\n**Parameters:**\n- `contentPath` (string): Path to the content directory\n- `options` (BuildOptions, optional): Build configuration options\n\n**Returns:** Promise<BuildResult>\n\n**Example:**\n```typescript\nimport { buildDocs } from 'svelte-markdown-pages/builder';\n\nconst result = await buildDocs('./docs', {\n  appOutput: './src/lib/content',\n  websiteOutput: './src/lib/content',\n  includeContent: true\n});\n```\n\n### `generateStaticSite(contentPath, outputPath, options?)`\n\nGenerates a complete static HTML site from markdown content.\n\n**Parameters:**\n- `contentPath` (string): Path to the content directory\n- `outputPath` (string): Path where the static site will be generated\n- `options` (StaticSiteOptions, optional): Static site configuration options\n\n**Returns:** Promise<StaticSiteResult>\n\n**Example:**\n```typescript\nimport { generateStaticSite } from 'svelte-markdown-pages/builder';\n\nconst result = await generateStaticSite('./docs', './dist', {\n  title: 'My Documentation',\n  baseUrl: 'https://example.com',\n  includeIndex: true\n});\n```\n\n## Types\n\n### BuildOptions\n\nConfiguration options for the `buildDocs` function.\n\n```typescript\ninterface BuildOptions {\n  appOutput?: string;\n  websiteOutput?: string;\n  staticOutput?: string;\n  includeContent?: boolean;\n  processor?: ContentProcessor;\n  plugins?: Plugin[];\n  hooks?: BuildHooks;\n}\n```\n\n**Properties:**\n- `appOutput` (string, optional): Directory for app-specific output files\n- `websiteOutput` (string, optional): Directory for website-specific output files\n- `staticOutput` (string, optional): Directory for static site output\n- `includeContent` (boolean, optional): Whether to include content in output bundles (default: false)\n- `processor` (ContentProcessor, optional): Custom content processor\n- `plugins` (Plugin[], optional): Array of plugins to apply\n- `hooks` (BuildHooks, optional): Build lifecycle hooks\n\n### StaticSiteOptions\n\nConfiguration options for the `generateStaticSite` function.\n\n```typescript\ninterface StaticSiteOptions {\n  title?: string;\n  baseUrl?: string;\n  css?: string;\n  js?: string;\n  includeIndex?: boolean;\n  indexTitle?: string;\n  processor?: ContentProcessor;\n  plugins?: Plugin[];\n}\n```\n\n**Properties:**\n- `title` (string, optional): Site title for generated HTML\n- `baseUrl` (string, optional): Base URL for the site\n- `css` (string, optional): Custom CSS content to include\n- `js` (string, optional): Custom JavaScript content to include\n- `includeIndex` (boolean, optional): Whether to generate an index page (default: false)\n- `indexTitle` (string, optional): Title for the generated index page\n- `processor` (ContentProcessor, optional): Custom content processor\n- `plugins` (Plugin[], optional): Array of plugins to apply\n\n### BuildResult\n\nResult object returned by `buildDocs`.\n\n```typescript\ninterface BuildResult {\n  navigation: NavigationData;\n  content?: ContentBundle;\n  files: string[];\n  stats: BuildStats;\n}\n```\n\n**Properties:**\n- `navigation` (NavigationData): Generated navigation structure\n- `content` (ContentBundle, optional): Content bundle (if includeContent is true)\n- `files` (string[]): List of generated files\n- `stats` (BuildStats): Build statistics\n\n### StaticSiteResult\n\nResult object returned by `generateStaticSite`.\n\n```typescript\ninterface StaticSiteResult {\n  files: string[];\n  stats: BuildStats;\n  urls: string[];\n}\n```\n\n**Properties:**\n- `files` (string[]): List of generated files\n- `stats` (BuildStats): Build statistics\n- `urls` (string[]): List of generated URLs\n\n### ContentProcessor\n\nInterface for custom content processors.\n\n```typescript\ninterface ContentProcessor {\n  process(content: string): string;\n}\n```\n\n**Methods:**\n- `process(content: string): string`: Process and transform content\n\n### Plugin\n\nInterface for plugins.\n\n```typescript\ninterface Plugin {\n  name: string;\n  version: string;\n  process?: (content: string) => string;\n  transform?: (content: string) => string;\n  validate?: (content: string) => boolean;\n  beforeBuild?: () => void;\n  afterBuild?: (result: any) => void;\n}\n```\n\n**Properties:**\n- `name` (string): Plugin name\n- `version` (string): Plugin version\n- `process` (function, optional): Content processing function\n- `transform` (function, optional): Content transformation function\n- `validate` (function, optional): Content validation function\n- `beforeBuild` (function, optional): Pre-build hook\n- `afterBuild` (function, optional): Post-build hook\n\n### BuildHooks\n\nLifecycle hooks for the build process.\n\n```typescript\ninterface BuildHooks {\n  beforeBuild?: (contentPath: string) => void | Promise<void>;\n  afterBuild?: (result: BuildResult) => void | Promise<void>;\n  onError?: (error: Error) => void;\n}\n```\n\n**Properties:**\n- `beforeBuild` (function, optional): Called before build starts\n- `afterBuild` (function, optional): Called after build completes\n- `onError` (function, optional): Called when build errors occur\n\n### BuildStats\n\nStatistics about the build process.\n\n```typescript\ninterface BuildStats {\n  pages: number;\n  sections: number;\n  totalFiles: number;\n  buildTime: number;\n  errors: string[];\n  warnings: string[];\n}\n```\n\n**Properties:**\n- `pages` (number): Number of pages processed\n- `sections` (number): Number of sections processed\n- `totalFiles` (number): Total number of files processed\n- `buildTime` (number): Build time in milliseconds\n- `errors` (string[]): List of build errors\n- `warnings` (string[]): List of build warnings\n\n## Examples\n\n### Basic Build\n\n```typescript\nimport { buildDocs } from 'svelte-markdown-pages/builder';\n\nconst result = await buildDocs('./docs', {\n  appOutput: './src/lib/content',\n  includeContent: true\n});\n\nconsole.log(`Built ${result.stats.pages} pages in ${result.stats.buildTime}ms`);\n```\n\n### Advanced Build with Plugins\n\n```typescript\nimport { buildDocs } from 'svelte-markdown-pages/builder';\n\nconst customProcessor = {\n  process(content: string): string {\n    return content.replace(/:::(.+?):::/g, '<CustomComponent>$1</CustomComponent>');\n  }\n};\n\nconst customPlugin = {\n  name: 'custom-plugin',\n  version: '1.0.0',\n  process(content: string): string {\n    return content.replace(/\\[\\[(.+?)\\]\\]/g, '<InternalLink>$1</InternalLink>');\n  }\n};\n\nconst result = await buildDocs('./docs', {\n  appOutput: './src/lib/content',\n  websiteOutput: './src/lib/content',\n  includeContent: true,\n  processor: customProcessor,\n  plugins: [customPlugin],\n  hooks: {\n    beforeBuild: (contentPath) => {\n      console.log(`Starting build for: ${contentPath}`);\n    },\n    afterBuild: (result) => {\n      console.log(`Build completed: ${result.files.length} files generated`);\n    },\n    onError: (error) => {\n      console.error('Build error:', error.message);\n    }\n  }\n});\n```\n\n### Static Site Generation\n\n```typescript\nimport { generateStaticSite } from 'svelte-markdown-pages/builder';\n\nconst result = await generateStaticSite('./docs', './dist', {\n  title: 'My Documentation',\n  baseUrl: 'https://docs.example.com',\n  css: `\n    body { font-family: 'Inter', sans-serif; }\n    .docs-content { max-width: 800px; margin: 0 auto; }\n  `,\n  js: `\n    // Add syntax highlighting\n    hljs.highlightAll();\n  `,\n  includeIndex: true,\n  indexTitle: 'Documentation Home'\n});\n\nconsole.log(`Generated ${result.files.length} files`);\nconsole.log(`Available URLs: ${result.urls.join(', ')}`);\n```\n\n### Error Handling\n\n```typescript\nimport { buildDocs } from 'svelte-markdown-pages/builder';\n\ntry {\n  const result = await buildDocs('./docs', {\n    appOutput: './src/lib/content',\n    includeContent: true\n  });\n  \n  if (result.stats.errors.length > 0) {\n    console.error('Build completed with errors:', result.stats.errors);\n  }\n  \n  if (result.stats.warnings.length > 0) {\n    console.warn('Build completed with warnings:', result.stats.warnings);\n  }\n} catch (error) {\n  console.error('Build failed:', error.message);\n  process.exit(1);\n}\n```\n\n## Error Codes\n\nThe builder functions may throw errors with specific error codes:\n\n- `ENOENT`: Content directory not found\n- `INVALID_INDEX`: Invalid `.index.json` file\n- `MISSING_CONTENT`: Required content file missing\n- `PROCESSING_ERROR`: Content processing failed\n- `PLUGIN_ERROR`: Plugin execution failed\n\n## Performance Considerations\n\n### Large Documentation Sites\n\nFor large documentation sites, consider:\n\n1. **Disable content inclusion** if not needed:\n   ```typescript\n   await buildDocs('./docs', {\n     appOutput: './src/lib/content',\n     includeContent: false\n   });\n   ```\n\n2. **Use efficient processors**:\n   ```typescript\n   const efficientProcessor = {\n     process(content: string): string {\n       // Use efficient string operations\n       return content.replace(/pattern/g, 'replacement');\n     }\n   };\n   ```\n\n3. **Implement caching**:\n   ```typescript\n   const cache = new Map();\n   \n   const cachedProcessor = {\n     process(content: string): string {\n       const hash = createHash(content);\n       if (cache.has(hash)) {\n         return cache.get(hash);\n       }\n       \n       const result = processContent(content);\n       cache.set(hash, result);\n       return result;\n     }\n   };\n   ```\n\n## Related\n\n- [Renderer API](./renderer.md) - Content rendering and navigation\n- [Types](./types.md) - Type definitions and interfaces\n",
  "api/renderer.md": "# Renderer API\n\nThe renderer module provides classes and functions for rendering content and managing navigation in your Svelte applications.\n\n## Classes\n\n### `NavigationTree`\n\nManages navigation structure and provides navigation utilities.\n\n```typescript\nimport { NavigationTree } from 'svelte-markdown-pages/renderer';\n\nconst navigation = new NavigationTree(navigationData);\n```\n\n#### Constructor\n\n**Parameters:**\n- `navigationData` (NavigationData): Navigation structure data\n\n#### Methods\n\n##### `findItemByPath(path: string): NavigationItem | null`\n\nFinds a navigation item by its file path.\n\n**Parameters:**\n- `path` (string): File path to search for\n\n**Returns:** NavigationItem | null\n\n**Example:**\n```typescript\nconst item = navigation.findItemByPath('guides/installation.md');\nif (item) {\n  console.log('Found item:', item.label);\n}\n```\n\n##### `getBreadcrumbs(path: string): NavigationItem[]`\n\nGets the breadcrumb trail for a given path.\n\n**Parameters:**\n- `path` (string): File path to get breadcrumbs for\n\n**Returns:** NavigationItem[]\n\n**Example:**\n```typescript\nconst breadcrumbs = navigation.getBreadcrumbs('guides/advanced/customization.md');\n// Returns: [root, guides, advanced, customization]\n```\n\n##### `getSiblings(path: string): NavigationItem[]`\n\nGets sibling items for a given path.\n\n**Parameters:**\n- `path` (string): File path to get siblings for\n\n**Returns:** NavigationItem[]\n\n**Example:**\n```typescript\nconst siblings = navigation.getSiblings('guides/installation.md');\n// Returns: [installation, configuration, advanced]\n```\n\n##### `getNextSibling(path: string): NavigationItem | null`\n\nGets the next sibling item.\n\n**Parameters:**\n- `path` (string): Current file path\n\n**Returns:** NavigationItem | null\n\n**Example:**\n```typescript\nconst next = navigation.getNextSibling('guides/installation.md');\nif (next) {\n  console.log('Next page:', next.label);\n}\n```\n\n##### `getPreviousSibling(path: string): NavigationItem | null`\n\nGets the previous sibling item.\n\n**Parameters:**\n- `path` (string): Current file path\n\n**Returns:** NavigationItem | null\n\n**Example:**\n```typescript\nconst prev = navigation.getPreviousSibling('guides/configuration.md');\nif (prev) {\n  console.log('Previous page:', prev.label);\n}\n```\n\n##### `getChildren(path: string): NavigationItem[]`\n\nGets child items for a given path.\n\n**Parameters:**\n- `path` (string): Parent path to get children for\n\n**Returns:** NavigationItem[]\n\n**Example:**\n```typescript\nconst children = navigation.getChildren('guides');\n// Returns: [installation, configuration, advanced]\n```\n\n##### `getParent(path: string): NavigationItem | null`\n\nGets the parent item for a given path.\n\n**Parameters:**\n- `path` (string): Child path to get parent for\n\n**Returns:** NavigationItem | null\n\n**Example:**\n```typescript\nconst parent = navigation.getParent('guides/installation.md');\nif (parent) {\n  console.log('Parent section:', parent.label);\n}\n```\n\n### `ContentLoader`\n\nManages content loading and processing.\n\n```typescript\nimport { ContentLoader } from 'svelte-markdown-pages/renderer';\n\nconst loader = new ContentLoader(contentBundle);\n```\n\n#### Constructor\n\n**Parameters:**\n- `contentBundle` (ContentBundle): Content bundle data\n\n#### Methods\n\n##### `loadAndProcess(path: string, processor?: ContentProcessor): string`\n\nLoads and processes content for a specific path.\n\n**Parameters:**\n- `path` (string): Content path to load\n- `processor` (ContentProcessor, optional): Custom content processor\n\n**Returns:** string\n\n**Example:**\n```typescript\nconst content = loader.loadAndProcess('getting-started.md');\nconsole.log('Content loaded:', content.length, 'characters');\n```\n\n##### `hasContent(path: string): boolean`\n\nChecks if content exists for a given path.\n\n**Parameters:**\n- `path` (string): Content path to check\n\n**Returns:** boolean\n\n**Example:**\n```typescript\nif (loader.hasContent('guides/installation.md')) {\n  console.log('Installation guide exists');\n}\n```\n\n##### `getAvailablePaths(): string[]`\n\nGets all available content paths.\n\n**Returns:** string[]\n\n**Example:**\n```typescript\nconst paths = loader.getAvailablePaths();\nconsole.log('Available content:', paths);\n```\n\n##### `getContentMetadata(path: string): ContentMetadata | null`\n\nGets metadata for a content file.\n\n**Parameters:**\n- `path` (string): Content path to get metadata for\n\n**Returns:** ContentMetadata | null\n\n**Example:**\n```typescript\nconst metadata = loader.getContentMetadata('getting-started.md');\nif (metadata) {\n  console.log('Title:', metadata.title);\n  console.log('Last modified:', metadata.lastModified);\n}\n```\n\n## Functions\n\n### `loadContent(path, contentBundle, processor?)`\n\nLoads and processes content for a specific path.\n\n**Parameters:**\n- `path` (string): Content path to load\n- `contentBundle` (ContentBundle): Content bundle data\n- `processor` (ContentProcessor, optional): Custom content processor\n\n**Returns:** Promise<string>\n\n**Example:**\n```typescript\nimport { loadContent } from 'svelte-markdown-pages/renderer';\n\nconst content = await loadContent('getting-started.md', contentBundle);\n```\n\n### `extractHeadings(content: string): Heading[]`\n\nExtracts headings from markdown content.\n\n**Parameters:**\n- `content` (string): Markdown content to extract headings from\n\n**Returns:** Heading[]\n\n**Example:**\n```typescript\nimport { extractHeadings } from 'svelte-markdown-pages/renderer';\n\nconst headings = extractHeadings(content);\nheadings.forEach(heading => {\n  console.log(`${'#'.repeat(heading.level)} ${heading.text}`);\n});\n```\n\n### `extractTableOfContents(content: string): TableOfContentsItem[]`\n\nExtracts table of contents from markdown content.\n\n**Parameters:**\n- `content` (string): Markdown content to extract TOC from\n\n**Returns:** TableOfContentsItem[]\n\n**Example:**\n```typescript\nimport { extractTableOfContents } from 'svelte-markdown-pages/renderer';\n\nconst toc = extractTableOfContents(content);\ntoc.forEach(item => {\n  console.log(`${'  '.repeat(item.depth)}- ${item.text}`);\n});\n```\n\n### `addTableOfContents(content: string, toc?: TableOfContentsItem[]): string`\n\nAdds a table of contents to markdown content.\n\n**Parameters:**\n- `content` (string): Markdown content to add TOC to\n- `toc` (TableOfContentsItem[], optional): Pre-generated TOC\n\n**Returns:** string\n\n**Example:**\n```typescript\nimport { addTableOfContents } from 'svelte-markdown-pages/renderer';\n\nconst contentWithToc = addTableOfContents(content);\n```\n\n## Types\n\n### NavigationItem\n\nRepresents a navigation item.\n\n```typescript\ninterface NavigationItem {\n  name: string;\n  type: 'page' | 'section';\n  label: string;\n  items?: NavigationItem[];\n  collapsed?: boolean;\n  url?: string;\n}\n```\n\n**Properties:**\n- `name` (string): File/directory name (without extension)\n- `type` ('page' | 'section'): Item type\n- `label` (string): Display label\n- `items` (NavigationItem[], optional): Child items (for sections)\n- `collapsed` (boolean, optional): Whether section is collapsed by default\n- `url` (string, optional): External URL\n\n### NavigationData\n\nComplete navigation structure.\n\n```typescript\ninterface NavigationData {\n  items: NavigationItem[];\n}\n```\n\n### ContentBundle\n\nBundle containing all content data.\n\n```typescript\ninterface ContentBundle {\n  [path: string]: string;\n}\n```\n\n### ContentMetadata\n\nMetadata for a content file.\n\n```typescript\ninterface ContentMetadata {\n  title: string;\n  description?: string;\n  lastModified: Date;\n  wordCount: number;\n  readingTime: number;\n}\n```\n\n### Heading\n\nRepresents a markdown heading.\n\n```typescript\ninterface Heading {\n  level: number;\n  text: string;\n  id: string;\n  line: number;\n}\n```\n\n**Properties:**\n- `level` (number): Heading level (1-6)\n- `text` (string): Heading text\n- `id` (string): Generated heading ID\n- `line` (number): Line number in source\n\n### TableOfContentsItem\n\nRepresents a table of contents item.\n\n```typescript\ninterface TableOfContentsItem {\n  level: number;\n  text: string;\n  id: string;\n  children: TableOfContentsItem[];\n}\n```\n\n**Properties:**\n- `level` (number): Heading level\n- `text` (string): Heading text\n- `id` (string): Heading ID\n- `children` (TableOfContentsItem[]): Child items\n\n### ContentProcessor\n\nInterface for content processors.\n\n```typescript\ninterface ContentProcessor {\n  process(content: string): string;\n}\n```\n\n## Examples\n\n### Basic Navigation Usage\n\n```typescript\nimport { NavigationTree } from 'svelte-markdown-pages/renderer';\nimport navigationData from './content/navigation.json';\n\nconst navigation = new NavigationTree(navigationData);\n\n// Find current page\nconst currentPage = navigation.findItemByPath('guides/installation.md');\n\n// Get breadcrumbs\nconst breadcrumbs = navigation.getBreadcrumbs('guides/installation.md');\n\n// Get navigation siblings\nconst nextPage = navigation.getNextSibling('guides/installation.md');\nconst prevPage = navigation.getPreviousSibling('guides/installation.md');\n```\n\n### Content Loading\n\n```typescript\nimport { ContentLoader, loadContent } from 'svelte-markdown-pages/renderer';\nimport contentBundle from './content/content.json';\n\n// Using ContentLoader class\nconst loader = new ContentLoader(contentBundle);\nconst content = loader.loadAndProcess('getting-started.md');\n\n// Using loadContent function\nconst content = await loadContent('getting-started.md', contentBundle);\n```\n\n### Table of Contents\n\n```typescript\nimport { \n  extractHeadings, \n  extractTableOfContents, \n  addTableOfContents \n} from 'svelte-markdown-pages/renderer';\n\n// Extract headings\nconst headings = extractHeadings(content);\n\n// Generate table of contents\nconst toc = extractTableOfContents(content);\n\n// Add table of contents to content\nconst contentWithToc = addTableOfContents(content, toc);\n```\n\n### Custom Content Processing\n\n```typescript\nimport { loadContent } from 'svelte-markdown-pages/renderer';\n\nconst customProcessor = {\n  process(content: string): string {\n    // Add custom processing\n    return content\n      .replace(/:::(.+?):::/g, '<CustomComponent>$1</CustomComponent>')\n      .replace(/\\[\\[(.+?)\\]\\]/g, '<InternalLink>$1</InternalLink>');\n  }\n};\n\nconst processedContent = await loadContent(\n  'getting-started.md', \n  contentBundle, \n  customProcessor\n);\n```\n\n### Svelte Component Integration\n\n```svelte\n<script lang=\"ts\">\n  import { NavigationTree, loadContent } from 'svelte-markdown-pages/renderer';\n  import type { NavigationItem } from 'svelte-markdown-pages';\n  import navigationData from '$lib/content/navigation.json';\n  import contentBundle from '$lib/content/content.json';\n  \n  let navigation = $state(new NavigationTree(navigationData));\n  let currentPage = $state<string>(\"getting-started.md\");\n  let pageContent = $state<string | null>(null);\n  \n  $effect(() => {\n    if (currentPage && contentBundle) {\n      loadContent(currentPage, contentBundle).then(content => {\n        pageContent = content;\n      });\n    }\n  });\n  \n  function handlePageSelect(path: string) {\n    currentPage = path;\n  }\n  \n  function renderNavigationItems(items: NavigationItem[]): string {\n    return items.map(item => {\n      if (item.type === 'section') {\n        return `\n          <div class=\"nav-section\">\n            <h3>${item.label}</h3>\n            ${renderNavigationItems(item.items || [])}\n          </div>\n        `;\n      } else {\n        const isActive = currentPage === item.name + '.md';\n        return `\n          <button \n            class=\"nav-link ${isActive ? 'active' : ''}\"\n            onclick=\"window.dispatchEvent(new CustomEvent('pageSelect', { detail: '${item.name}.md' }))\"\n          >\n            ${item.label}\n          </button>\n        `;\n      }\n    }).join('');\n  }\n  \n  // Set up event listener\n  if (typeof window !== 'undefined') {\n    window.addEventListener('pageSelect', (event: any) => {\n      handlePageSelect(event.detail);\n    });\n  }\n</script>\n\n<div class=\"docs-layout\">\n  <nav class=\"docs-sidebar\">\n    {@html renderNavigationItems(navigation.items)}\n  </nav>\n  \n  <div class=\"docs-content\">\n    {@html pageContent || 'No content selected'}\n  </div>\n</div>\n```\n\n## Error Handling\n\n### Content Loading Errors\n\n```typescript\nimport { loadContent } from 'svelte-markdown-pages/renderer';\n\ntry {\n  const content = await loadContent('non-existent.md', contentBundle);\n} catch (error) {\n  if (error.code === 'CONTENT_NOT_FOUND') {\n    console.error('Content not found');\n  } else {\n    console.error('Failed to load content:', error.message);\n  }\n}\n```\n\n### Navigation Errors\n\n```typescript\nimport { NavigationTree } from 'svelte-markdown-pages/renderer';\n\ntry {\n  const navigation = new NavigationTree(navigationData);\n  const item = navigation.findItemByPath('invalid/path.md');\n  \n  if (!item) {\n    console.warn('Navigation item not found');\n  }\n} catch (error) {\n  console.error('Navigation error:', error.message);\n}\n```\n\n## Performance Considerations\n\n### Lazy Loading\n\nFor large content bundles, consider lazy loading:\n\n```typescript\nconst lazyLoader = {\n  async loadContent(path: string): Promise<string> {\n    // Load content on demand\n    const response = await fetch(`/api/content/${path}`);\n    return response.text();\n  }\n};\n```\n\n### Caching\n\nImplement caching for frequently accessed content:\n\n```typescript\nconst contentCache = new Map();\n\nasync function loadContentWithCache(path: string, contentBundle: any): Promise<string> {\n  if (contentCache.has(path)) {\n    return contentCache.get(path);\n  }\n  \n  const content = await loadContent(path, contentBundle);\n  contentCache.set(path, content);\n  return content;\n}\n```\n\n## Related\n\n- [Builder API](./builder.md) - Content building and generation\n- [Types](./types.md) - Type definitions and interfaces\n",
  "api/types.md": "# Types\n\nComplete type definitions and interfaces for svelte-markdown-pages.\n\n## Core Types\n\n### NavigationItem\n\nRepresents a navigation item in the documentation structure.\n\n```typescript\ninterface NavigationItem {\n  name: string;\n  type: 'page' | 'section';\n  label: string;\n  items?: NavigationItem[];\n  collapsed?: boolean;\n  url?: string;\n}\n```\n\n**Properties:**\n- `name` (string): File/directory name without extension\n- `type` ('page' | 'section'): Type of navigation item\n- `label` (string): Display label for the item\n- `items` (NavigationItem[], optional): Child items for sections\n- `collapsed` (boolean, optional): Whether section is collapsed by default\n- `url` (string, optional): External URL for the item\n\n### NavigationData\n\nComplete navigation structure for the documentation.\n\n```typescript\ninterface NavigationData {\n  items: NavigationItem[];\n}\n```\n\n**Properties:**\n- `items` (NavigationItem[]): Root-level navigation items\n\n### ContentBundle\n\nBundle containing all content data indexed by file path.\n\n```typescript\ninterface ContentBundle {\n  [path: string]: string;\n}\n```\n\n**Properties:**\n- `[path: string]` (string): Content indexed by file path\n\n## Builder Types\n\n### BuildOptions\n\nConfiguration options for the `buildDocs` function.\n\n```typescript\ninterface BuildOptions {\n  appOutput?: string;\n  websiteOutput?: string;\n  staticOutput?: string;\n  includeContent?: boolean;\n  processor?: ContentProcessor;\n  plugins?: Plugin[];\n  hooks?: BuildHooks;\n}\n```\n\n**Properties:**\n- `appOutput` (string, optional): Directory for app-specific output files\n- `websiteOutput` (string, optional): Directory for website-specific output files\n- `staticOutput` (string, optional): Directory for static site output\n- `includeContent` (boolean, optional): Whether to include content in output bundles\n- `processor` (ContentProcessor, optional): Custom content processor\n- `plugins` (Plugin[], optional): Array of plugins to apply\n- `hooks` (BuildHooks, optional): Build lifecycle hooks\n\n### StaticSiteOptions\n\nConfiguration options for the `generateStaticSite` function.\n\n```typescript\ninterface StaticSiteOptions {\n  title?: string;\n  baseUrl?: string;\n  css?: string;\n  js?: string;\n  includeIndex?: boolean;\n  indexTitle?: string;\n  processor?: ContentProcessor;\n  plugins?: Plugin[];\n}\n```\n\n**Properties:**\n- `title` (string, optional): Site title for generated HTML\n- `baseUrl` (string, optional): Base URL for the site\n- `css` (string, optional): Custom CSS content to include\n- `js` (string, optional): Custom JavaScript content to include\n- `includeIndex` (boolean, optional): Whether to generate an index page\n- `indexTitle` (string, optional): Title for the generated index page\n- `processor` (ContentProcessor, optional): Custom content processor\n- `plugins` (Plugin[], optional): Array of plugins to apply\n\n### BuildResult\n\nResult object returned by `buildDocs`.\n\n```typescript\ninterface BuildResult {\n  navigation: NavigationData;\n  content?: ContentBundle;\n  files: string[];\n  stats: BuildStats;\n}\n```\n\n**Properties:**\n- `navigation` (NavigationData): Generated navigation structure\n- `content` (ContentBundle, optional): Content bundle (if includeContent is true)\n- `files` (string[]): List of generated files\n- `stats` (BuildStats): Build statistics\n\n### StaticSiteResult\n\nResult object returned by `generateStaticSite`.\n\n```typescript\ninterface StaticSiteResult {\n  files: string[];\n  stats: BuildStats;\n  urls: string[];\n}\n```\n\n**Properties:**\n- `files` (string[]): List of generated files\n- `stats` (BuildStats): Build statistics\n- `urls` (string[]): List of generated URLs\n\n### BuildStats\n\nStatistics about the build process.\n\n```typescript\ninterface BuildStats {\n  pages: number;\n  sections: number;\n  totalFiles: number;\n  buildTime: number;\n  errors: string[];\n  warnings: string[];\n}\n```\n\n**Properties:**\n- `pages` (number): Number of pages processed\n- `sections` (number): Number of sections processed\n- `totalFiles` (number): Total number of files processed\n- `buildTime` (number): Build time in milliseconds\n- `errors` (string[]): List of build errors\n- `warnings` (string[]): List of build warnings\n\n### BuildHooks\n\nLifecycle hooks for the build process.\n\n```typescript\ninterface BuildHooks {\n  beforeBuild?: (contentPath: string) => void | Promise<void>;\n  afterBuild?: (result: BuildResult) => void | Promise<void>;\n  onError?: (error: Error) => void;\n}\n```\n\n**Properties:**\n- `beforeBuild` (function, optional): Called before build starts\n- `afterBuild` (function, optional): Called after build completes\n- `onError` (function, optional): Called when build errors occur\n\n## Renderer Types\n\n### ContentMetadata\n\nMetadata for a content file.\n\n```typescript\ninterface ContentMetadata {\n  title: string;\n  description?: string;\n  lastModified: Date;\n  wordCount: number;\n  readingTime: number;\n}\n```\n\n**Properties:**\n- `title` (string): Content title\n- `description` (string, optional): Content description\n- `lastModified` (Date): Last modification date\n- `wordCount` (number): Number of words in content\n- `readingTime` (number): Estimated reading time in minutes\n\n### Heading\n\nRepresents a markdown heading.\n\n```typescript\ninterface Heading {\n  level: number;\n  text: string;\n  id: string;\n  line: number;\n}\n```\n\n**Properties:**\n- `level` (number): Heading level (1-6)\n- `text` (string): Heading text\n- `id` (string): Generated heading ID\n- `line` (number): Line number in source\n\n### TableOfContentsItem\n\nRepresents a table of contents item.\n\n```typescript\ninterface TableOfContentsItem {\n  level: number;\n  text: string;\n  id: string;\n  children: TableOfContentsItem[];\n}\n```\n\n**Properties:**\n- `level` (number): Heading level\n- `text` (string): Heading text\n- `id` (string): Heading ID\n- `children` (TableOfContentsItem[]): Child items\n\n## Plugin Types\n\n### Plugin\n\nInterface for plugins.\n\n```typescript\ninterface Plugin {\n  name: string;\n  version: string;\n  process?: (content: string) => string;\n  transform?: (content: string) => string;\n  validate?: (content: string) => boolean;\n  beforeBuild?: () => void;\n  afterBuild?: (result: any) => void;\n}\n```\n\n**Properties:**\n- `name` (string): Plugin name\n- `version` (string): Plugin version\n- `process` (function, optional): Content processing function\n- `transform` (function, optional): Content transformation function\n- `validate` (function, optional): Content validation function\n- `beforeBuild` (function, optional): Pre-build hook\n- `afterBuild` (function, optional): Post-build hook\n\n### PluginConfig\n\nConfiguration for a plugin.\n\n```typescript\ninterface PluginConfig {\n  enabled?: boolean;\n  options?: Record<string, any>;\n}\n```\n\n**Properties:**\n- `enabled` (boolean, optional): Whether plugin is enabled\n- `options` (Record<string, any>, optional): Plugin-specific options\n\n## Processor Types\n\n### ContentProcessor\n\nInterface for content processors.\n\n```typescript\ninterface ContentProcessor {\n  process(content: string): string;\n}\n```\n\n**Methods:**\n- `process(content: string): string`: Process and transform content\n\n### ProcessorOptions\n\nOptions for content processors.\n\n```typescript\ninterface ProcessorOptions {\n  markdown?: boolean;\n  html?: boolean;\n  custom?: boolean;\n}\n```\n\n**Properties:**\n- `markdown` (boolean, optional): Whether to process markdown\n- `html` (boolean, optional): Whether to process HTML\n- `custom` (boolean, optional): Whether to apply custom processing\n\n## Error Types\n\n### BuildError\n\nError thrown during build process.\n\n```typescript\ninterface BuildError extends Error {\n  code: string;\n  path?: string;\n  details?: any;\n}\n```\n\n**Properties:**\n- `code` (string): Error code\n- `path` (string, optional): File path where error occurred\n- `details` (any, optional): Additional error details\n\n### ContentError\n\nError thrown during content processing.\n\n```typescript\ninterface ContentError extends Error {\n  code: string;\n  path: string;\n  content?: string;\n}\n```\n\n**Properties:**\n- `code` (string): Error code\n- `path` (string): Content file path\n- `content` (string, optional): Content that caused error\n\n## Utility Types\n\n### DeepPartial\n\nMakes all properties in T optional recursively.\n\n```typescript\ntype DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n```\n\n### RequiredKeys\n\nExtracts keys of T that are required.\n\n```typescript\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K;\n}[keyof T];\n```\n\n### OptionalKeys\n\nExtracts keys of T that are optional.\n\n```typescript\ntype OptionalKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? K : never;\n}[keyof T];\n```\n\n## Type Guards\n\n### Type Guards for Runtime Validation\n\n```typescript\nfunction isNavigationItem(obj: any): obj is NavigationItem {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    typeof obj.name === 'string' &&\n    typeof obj.type === 'string' &&\n    (obj.type === 'page' || obj.type === 'section') &&\n    typeof obj.label === 'string'\n  );\n}\n\nfunction isNavigationData(obj: any): obj is NavigationData {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    Array.isArray(obj.items) &&\n    obj.items.every(isNavigationItem)\n  );\n}\n\nfunction isContentBundle(obj: any): obj is ContentBundle {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    Object.keys(obj).every(key => typeof obj[key] === 'string')\n  );\n}\n\nfunction isPlugin(obj: any): obj is Plugin {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    typeof obj.name === 'string' &&\n    typeof obj.version === 'string'\n  );\n}\n```\n\n## Zod Schemas\n\n### Validation Schemas\n\n```typescript\nimport { z } from 'zod';\n\nconst NavigationItemSchema = z.object({\n  name: z.string(),\n  type: z.enum(['page', 'section']),\n  label: z.string(),\n  items: z.array(z.lazy(() => NavigationItemSchema)).optional(),\n  collapsed: z.boolean().optional(),\n  url: z.string().url().optional()\n});\n\nconst NavigationDataSchema = z.object({\n  items: z.array(NavigationItemSchema)\n});\n\nconst ContentBundleSchema = z.record(z.string(), z.string());\n\nconst PluginSchema = z.object({\n  name: z.string(),\n  version: z.string(),\n  process: z.function().args(z.string()).returns(z.string()).optional(),\n  transform: z.function().args(z.string()).returns(z.string()).optional(),\n  validate: z.function().args(z.string()).returns(z.boolean()).optional(),\n  beforeBuild: z.function().returns(z.void()).optional(),\n  afterBuild: z.function().args(z.any()).returns(z.void()).optional()\n});\n\nconst BuildOptionsSchema = z.object({\n  appOutput: z.string().optional(),\n  websiteOutput: z.string().optional(),\n  staticOutput: z.string().optional(),\n  includeContent: z.boolean().optional(),\n  processor: z.object({\n    process: z.function().args(z.string()).returns(z.string())\n  }).optional(),\n  plugins: z.array(PluginSchema).optional(),\n  hooks: z.object({\n    beforeBuild: z.function().args(z.string()).returns(z.union([z.void(), z.promise(z.void())])).optional(),\n    afterBuild: z.function().args(z.any()).returns(z.union([z.void(), z.promise(z.void())])).optional(),\n    onError: z.function().args(z.instanceof(Error)).returns(z.void()).optional()\n  }).optional()\n});\n```\n\n## Usage Examples\n\n### Type-Safe Navigation\n\n```typescript\nimport type { NavigationItem, NavigationData } from 'svelte-markdown-pages';\n\nfunction validateNavigation(data: unknown): NavigationData {\n  if (!isNavigationData(data)) {\n    throw new Error('Invalid navigation data');\n  }\n  return data;\n}\n\nfunction findPage(items: NavigationItem[], name: string): NavigationItem | null {\n  for (const item of items) {\n    if (item.name === name && item.type === 'page') {\n      return item;\n    }\n    if (item.items) {\n      const found = findPage(item.items, name);\n      if (found) return found;\n    }\n  }\n  return null;\n}\n```\n\n### Type-Safe Content Processing\n\n```typescript\nimport type { ContentProcessor, ContentBundle } from 'svelte-markdown-pages';\n\nfunction createProcessor(options: ProcessorOptions): ContentProcessor {\n  return {\n    process(content: string): string {\n      let processed = content;\n      \n      if (options.markdown) {\n        processed = processMarkdown(processed);\n      }\n      \n      if (options.html) {\n        processed = processHtml(processed);\n      }\n      \n      if (options.custom) {\n        processed = processCustom(processed);\n      }\n      \n      return processed;\n    }\n  };\n}\n\nfunction validateContentBundle(bundle: unknown): ContentBundle {\n  if (!isContentBundle(bundle)) {\n    throw new Error('Invalid content bundle');\n  }\n  return bundle;\n}\n```\n\n### Type-Safe Plugin Development\n\n```typescript\nimport type { Plugin, PluginConfig } from 'svelte-markdown-pages';\n\nfunction createPlugin(config: PluginConfig): Plugin {\n  return {\n    name: 'my-plugin',\n    version: '1.0.0',\n    process(content: string): string {\n      if (!config.enabled) {\n        return content;\n      }\n      \n      // Apply plugin processing based on config.options\n      return content;\n    }\n  };\n}\n\nfunction validatePlugin(plugin: unknown): Plugin {\n  if (!isPlugin(plugin)) {\n    throw new Error('Invalid plugin');\n  }\n  return plugin;\n}\n```\n\n## Related\n\n- [Builder API](./builder.md) - Content building and generation\n- [Renderer API](./renderer.md) - Content rendering and navigation\n"
}